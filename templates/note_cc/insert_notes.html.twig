{% extends 'base_new.html.twig' %}

{% block title %}<title>Insérer les notes - {{ ec.name }}</title>{% endblock %}

{% block body %}
<div class="container mx-auto px-4 py-8 bg-gray-100 min-h-screen">
    <h1 class="text-4xl font-bold mb-6 text-indigo-800 text-center">Insérer les notes pour {{ ec.name }}</h1>

    <div class="mb-8 text-center">
        <p class="text-lg text-gray-700">
            <span class="font-semibold">UE :</span> {{ ue.name }}
        </p>
        <p class="text-lg text-gray-700">
            <span class="font-semibold">EC :</span> {{ ec.name }}
        </p>
    </div>

    {% for message in app.flashes('success') %}
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded-r shadow-md" role="alert">
            <p class="font-bold">Succès!</p>
            <p>{{ message }}</p>
        </div>
    {% endfor %}

    <div class="bg-white shadow-lg rounded-lg p-8 mb-8">
        {{ form_start(form, {'attr': {'id': 'note-form'}}) }}
            <div class="mb-6">
                {{ form_label(form.hasTp, null, {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
                {{ form_widget(form.hasTp, {'attr': {'class': 'mt-1 block'}}) }}
            </div>

            <div class="mb-6">
                {{ form_label(form.ccMax, 'Note maximale CC :', {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
                {{ form_widget(form.ccMax, {'attr': {'class': 'bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 transition duration-300'}}) }}
            </div>

            <div class="mb-6" id="tp_max_container">
                {{ form_label(form.tpMax, 'Note maximale TP :', {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
                {{ form_widget(form.tpMax, {'attr': {'class': 'bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 transition duration-300'}}) }}
            </div>

            <div class="overflow-x-auto bg-white rounded-lg shadow">
                <table class="w-full table-auto">
                    <thead>
                        <tr class="bg-indigo-600 text-white uppercase text-sm leading-normal">
                            <th class="py-3 px-6 text-left">Étudiant</th>
                            <th class="py-3 px-6 text-center">Note CC</th>
                            <th class="py-3 px-6 text-center">Note TP</th>
                        </tr>
                    </thead>
                    <tbody class="text-gray-600 text-sm">
                        {% for student in students %}
                            <tr class="border-b border-gray-200 hover:bg-gray-50 transition duration-300">
                                <td class="py-3 px-6 text-left whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="mr-2">
                                            <svg class="w-6 h-6 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
                                        </div>
                                        <span class="font-medium">{{ student.name }}</span>
                                    </div>
                                </td>
                                <td class="py-3 px-6 text-center">
                                    <input type="number" step="0.01" min="0" name="cc_{{ student.id }}" required
                                           class="cc-input bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 transition duration-300">
                                </td>
                                <td class="py-3 px-6 text-center">
                                    <input type="number" step="0.01" min="0" name="tp_{{ student.id }}"
                                           class="tp-input bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 transition duration-300">
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            <div class="flex justify-end mt-6">
                <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded-lg focus:outline-none focus:shadow-outline transition duration-300 transform hover:scale-105">
                    Enregistrer les notes
                </button>
            </div>
        {{ form_end(form) }}
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('note-form');
    const hasTpCheckbox = document.querySelector('input[name="form[hasTp]"]');
    const tpMaxContainer = document.getElementById('tp_max_container');
    const tpInputs = document.querySelectorAll('.tp-input');
    const ccInputs = document.querySelectorAll('.cc-input');
    const ccMaxSelect = document.querySelector('select[name="form[ccMax]"]');
    const tpMaxSelect = document.querySelector('select[name="form[tpMax]"]');

    function toggleTpFields() {
        if (hasTpCheckbox.checked) {
            tpMaxContainer.style.display = 'block';
            tpInputs.forEach(input => {
                input.style.display = 'block';
                input.disabled = false;
            });
        } else {
            tpMaxContainer.style.display = 'none';
            tpInputs.forEach(input => {
                input.style.display = 'none';
                input.disabled = true;
                input.value = '';
            });
        }
    }

    // Initial call to set the correct state
    toggleTpFields();

    // Event listener for checkbox change
    hasTpCheckbox.addEventListener('change', toggleTpFields);

    form.addEventListener('submit', function(e) {
        let isValid = true;
        const ccMax = parseInt(ccMaxSelect.value);
        const tpMax = parseInt(tpMaxSelect.value);

        ccInputs.forEach(input => {
            const value = parseFloat(input.value);
            if (isNaN(value) || value > ccMax) {
                isValid = false;
                input.classList.add('border-red-500');
            } else {
                input.classList.remove('border-red-500');
            }
        });

        if (hasTpCheckbox.checked) {
            tpInputs.forEach(input => {
                const value = parseFloat(input.value);
                if (isNaN(value) || value > tpMax) {
                    isValid = false;
                    input.classList.add('border-red-500');
                } else {
                    input.classList.remove('border-red-500');
                }
            });
        }

        if (!isValid) {
            e.preventDefault();
            alert('Veuillez vérifier que toutes les notes sont valides et inférieures ou égales à la note maximale.');
        }
    });

    function validateInput(input, maxValue) {
        const value = parseFloat(input.value);
        if (isNaN(value) || value > maxValue) {
            input.classList.add('border-red-500');
        } else {
            input.classList.remove('border-red-500');
        }
    }

    ccInputs.forEach(input => {
        input.addEventListener('input', () => validateInput(input, parseInt(ccMaxSelect.value)));
    });

    tpInputs.forEach(input => {
        input.addEventListener('input', () => validateInput(input, parseInt(tpMaxSelect.value)));
    });

    ccMaxSelect.addEventListener('change', () => {
        ccInputs.forEach(input => validateInput(input, parseInt(ccMaxSelect.value)));
    });

    tpMaxSelect.addEventListener('change', () => {
        tpInputs.forEach(input => validateInput(input, parseInt(tpMaxSelect.value)));
    });
});
</script>

{% endblock %}