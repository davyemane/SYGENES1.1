{% extends 'base.html.twig' %}

{% block title %}Insérer les notes - {{ ec.name }}{% endblock %}

{% block body %}
<div class="container mx-auto px-4 py-8 bg-gray-100 min-h-screen">
    <h1 class="text-4xl font-bold mb-6 text-indigo-800 text-center">Insérer les notes pour {{ ec.name }}</h1>

    <div class="mb-8 text-center">
        <p class="text-lg text-gray-700">
            <span class="font-semibold">Filière :</span> {{ fieldName }}
        </p>
        <p class="text-lg text-gray-700">
            <span class="font-semibold">UE :</span> {{ ue.name }}
        </p>
        <p class="text-lg text-gray-700">
            <span class="font-semibold">EC :</span> {{ ec.name }}
        </p>
    </div>

    {% for message in app.flashes('success') %}
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded-r shadow-md" role="alert">
            <p class="font-bold">Succès!</p>
            <p>{{ message }}</p>
        </div>
    {% endfor %}

    {% for message in app.flashes('error') %}
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded-r shadow-md" role="alert">
            <p class="font-bold">Erreur!</p>
            <p>{{ message }}</p>
        </div>
    {% endfor %}

    <div class="bg-white shadow-lg rounded-lg p-8 mb-8">
        {{ form_start(form, {'attr': {'id': 'note-form'}}) }}
            <div class="mb-6">
                <label for="total_points" class="block text-gray-700 text-sm font-bold mb-2">Note maximale :</label>
                {{ form_widget(form.totalPoints, {'attr': {'id': 'total_points', 'class': 'bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 transition duration-300'}}) }}
            </div>

            <div class="overflow-x-auto bg-white rounded-lg shadow">
                <table class="w-full table-auto">
                    <thead>
                        <tr class="bg-indigo-600 text-white uppercase text-sm leading-normal">
                            <th class="py-3 px-6 text-left">Anonymat</th>
                            <th class="py-3 px-6 text-center">Note</th>
                        </tr>
                    </thead>
                    <tbody class="text-gray-600 text-sm">
                        {% for ee in form.ees %}
                            <tr class="border-b border-gray-200 hover:bg-gray-50 transition duration-300">
                                <td class="py-3 px-6 text-left whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="mr-2">
                                            <svg class="w-6 h-6 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
                                        </div>
                                        <span class="font-medium">{{ form.vars.value.ees[loop.index0].anonymat.anonymat }}</span>
                                    </div>
                                </td>
                                <td class="py-3 px-6 text-center">
                                    {{ form_widget(ee.mark, {'attr': {'class': 'note-input bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 transition duration-300', 'required': 'required', 'min': 0, 'step': '0.01'}}) }}
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            <div class="flex justify-end mt-6">
                <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded-lg focus:outline-none focus:shadow-outline transition duration-300 transform hover:scale-105">
                    Enregistrer les notes
                </button>
            </div>
        {{ form_end(form) }}
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('note-form');
    const noteInputs = document.querySelectorAll('.note-input');
    const totalPointsSelect = document.getElementById('total_points');

    function validateInput(input, maxValue) {
        let value = parseFloat(input.value);
        if (isNaN(value) || value < 0) {
            input.value = '';
        } else if (value > maxValue) {
            input.value = maxValue;
        }
    }

    function updateAllInputs() {
        const maxValue = parseFloat(totalPointsSelect.value);
        noteInputs.forEach(input => validateInput(input, maxValue));
    }

    noteInputs.forEach(input => {
        input.addEventListener('input', () => validateInput(input, parseFloat(totalPointsSelect.value)));
    });

    totalPointsSelect.addEventListener('change', updateAllInputs);

    form.addEventListener('submit', function(e) {
        const maxValue = parseFloat(totalPointsSelect.value);
        let invalidNotes = [];

        noteInputs.forEach((input, index) => {
            const value = parseFloat(input.value);
            if (isNaN(value)) {
                invalidNotes.push(`L'anonymat ${index + 1} a une note non numérique.`);
            } else if (value < 0) {
                invalidNotes.push(`L'anonymat ${index + 1} a une note négative.`);
            } else if (value > maxValue) {
                invalidNotes.push(`L'anonymat ${index + 1} a une note (${value}) supérieure à la note maximale (${maxValue}).`);
            }
        });

        if (invalidNotes.length > 0) {
            e.preventDefault();
            alert("Erreurs de validation :\n\n" + invalidNotes.join("\n"));
        }
    });

    // Initial validation
    updateAllInputs();
});
</script>
{% endblock %}